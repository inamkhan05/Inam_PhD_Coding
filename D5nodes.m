clc;
clear all;
close all;
str = fprintf('Estimation of 3D location with Decision Tree Algorithm For Flying Ad Hoc Networks\n');
nodes=5;
str = fprintf('Number of nodes: %d\n', nodes);
xl=randi([1, 10],1,nodes);
yl=randi([1, 10],1,nodes);
zl=randi([1, 10],1,nodes);
mobileLoc  = randi([1, 10],1,3);
w={'a1' 'a2' 'a3' 'a4' 'a5' 'a6' 'a7' 'a8' 'a9'};
d1=[]; d2=[]; P=[];
for i=1:nodes
    plot3(xl(i),yl(i),zl(i),'b.','MarkerSize',9,'lineWidth',3);  %plot of initial known nodes
    xlabel('X-axis');
    ylabel('Y-axis');
    zlabel('Z-axis');
    title('Location estimation 3D');
    text(xl(i),yl(i),zl(i),w(i));
    axis([0 10 0 10 0 10]);
    hold on;
    grid on;
end
plot3(mobileLoc(1),mobileLoc(2),mobileLoc(3),'r*','MarkerSize',12,'lineWidth',2); % plot of unknown node
 for n = 1 : nodes
  distance = sqrt( (xl(n)-mobileLoc(1)).^2 + (yl(n)-mobileLoc(2)).^2 + (zl(n)-mobileLoc(2)).^2 ); % distance calculation with respected n known node
  d1(n)=distance;
  str = fprintf('Actual distance from node-%d: %d \n',n, d1(n));
 end
P0=55;  % path loss w.r.t reference
N=1;    % %path loss exponent
d0=1;   % reference distance
sigma=7; %noise variance
str = fprintf('Calculation of Received Signal Strength by log-normal model \n');
str = fprintf('Path loss for reference distance: %ddB \n', P0);
str = fprintf('Path loss exponent: %d \n', N);
str = fprintf('Reference distance: %dm \n', d0);
str = fprintf('Noise variance: %d \n', sigma);
for i=1:nodes 
P(i)=(P0-(10*N*log10(d1(i)/d0))+sigma); % received signal strength
str = fprintf('Received Signal Strength from node-%d: %d \n',i, P(i));
end
for i=1:nodes
    d2(i)=(10^((P0-P(i))/(10*N))); %estimated distance from RSS
%     while (d1(1)-d2(i)>0.1)
%         d2(i) = d2(i)+0.3*(d1(1)-d2(i))*d2(i);
%     end
    str = fprintf('Estimated distance from node-%d: %d \n',i, d2(i));
%str = fprintf('Estimated distance from node-%d: %d \n',i, dd2(i));
%str = fprintf('Estimated distance from node-%d: %d \n',i, ddd2(i));
end
B=sort(d1);
C=sort(d2);
R1=[];
for k=1:4
    for i=1:nodes
        if C(k)==d2(i)
           R=[xl(i) yl(i) zl(i)];
           R1=[R1;R];
           str = fprintf('Node with Good signal strength: Node-%d \n',i);
        end
    end
end
%ABC
Dab1=sqrt(((R1(1,1)-R1(2,1))^2) + ((R1(1,2)-R1(2,2))^2) + ((R1(1,3)-R1(2,3))^2));
Dbc1=sqrt(((R1(2,1)-R1(3,1))^2) + ((R1(2,2)-R1(3,2))^2) + ((R1(2,3)-R1(3,3))^2));
Dca1=sqrt(((R1(3,1)-R1(1,1))^2) + ((R1(3,2)-R1(1,2))^2) + ((R1(3,3)-R1(1,3))^2));
CA1=C(1)+C(2);
CB1=C(2)+C(3);
CC1=C(3)+C(1);
%ab
if Dab1 == (C(1)+C(2))
        Pab1=[(((C(2)*R1(1,1))-(C(1)*R1(2,1)))/(C(1)+C(2))) (((C(2)*R1(1,2))-(C(1)*R1(2,2)))/(C(1)+C(2))) (((C(2)*R1(1,3))-(C(1)*R1(2,3)))/(C(1)+C(2)))];
        PP1=Pab1;
elseif Dab1>(C(1)+C(2))
        Pab2=[(((C(2)*R1(1,1))+(C(1)*R1(2,1)))/(C(1)+C(2))) (((C(2)*R1(1,2))+(C(1)*R1(2,2)))/(C(1)+C(2))) (((C(2)*R1(1,3))-(C(1)*R1(2,3)))/(C(1)+C(2)))];
        PP1=Pab2;
elseif Dab1==abs(((C(1)-C(2))))
        Pab3=[(((C(2)*R1(1,1))-(C(1)*R1(2,1)))/(C(2)-C(1))) (((C(2)*R1(1,2))-(C(1)*R1(2,2)))/(C(2)-C(1))) (((C(2)*R1(1,3))-(C(1)*R1(2,3)))/(C(2)-C(1)))];
        PP1=Pab3;
elseif abs(((C(1)-C(2))))<Dab1<(C(1)+C(2))
        Vab1=(((C(2)^2) - (C(1)^2) - (R1(2,1)^2) + (R1(1,1)^2) - (R1(2,2)^2) + (R1(1,2)^2) - (R1(2,3)^2) + (R1(1,3)^2))/2);
        A1 = ((((R1(1,2)-R1(2,2))^2)/((R1(1,1)-R1(2,1))^2)) + 1);
        B1 = ((((R1(1,3)-R1(2,3))^2)/((R1(1,1)-R1(2,1))^2)) + 1);
        C1 = ((((-2)*Vab1*(R1(1,2)-R1(2,2)))/((R1(1,1)-R1(2,1))^2)) + (((2)*(R1(1,1))*(R1(1,2)-R1(2,2)))/((R1(1,1)-R1(2,1)))) - (2*R1(1,2)));
        D1 = ((((-2)*Vab1*(R1(1,3)-R1(2,3)))/((R1(1,1)-R1(2,1))^2)) + (((2)*(R1(1,1))*(R1(1,3)-R1(2,3)))/((R1(1,1)-R1(2,1)))) - (2*R1(1,3)));
        E1 = ((2)*(R1(1,2)-R1(2,2))*(R1(1,3)-R1(2,3)));
        Y1 = (-(((2*B1*C1) - (D1*E1))/((4*A1*B1) - E1^2)));
        Z1 = (-(((2*A1*D1) - (C1*E1))/((4*A1*B1) - E1^2)));
        X1 = ((Vab1 - (Y1*(R1(1,2)-R1(2,2))) - (Z1*(R1(1,3)-R1(2,3))))/((R1(1,1)-R1(2,1))));
        Pab4=[X1 Y1 Z1];
        PP1=Pab4;
else
        Pab5=[(((C(2)*R1(1,1))-(C(1)*R1(2,1)))/(C(1)-C(2))) (((C(2)*R1(1,2))-(C(1)*R1(2,2)))/(C(1)-C(2))) (((C(2)*R1(1,3))-(C(1)*R1(2,3)))/(C(1)-C(2)))];
        PP1=Pab5;
end
%bc
if Dbc1 == (C(2)+C(3))
        Pbc1=[(((C(3)*R1(2,1))-(C(2)*R1(3,1)))/(C(2)+C(3))) (((C(3)*R1(2,2))-(C(2)*R1(3,2)))/(C(2)+C(3))) (((C(3)*R1(2,3))-(C(2)*R1(3,3)))/(C(3)+C(2)))];
        PP2=Pbc1;
elseif Dbc1>(C(2)+C(3))
        Pbc2=[(((C(3)*R1(2,1))+(C(2)*R1(3,1)))/(C(2)+C(3))) (((C(3)*R1(2,2))+(C(2)*R1(3,2)))/(C(2)+C(3))) (((C(3)*R1(2,3))-(C(2)*R1(3,3)))/(C(3)+C(2)))];
        PP2=Pbc2;
elseif Dbc1==abs(((C(2)-C(3))))
        Pbc3=[(((C(3)*R1(2,1))-(C(2)*R1(3,1)))/(C(3)-C(2))) (((C(3)*R1(2,2))-(C(2)*R1(3,1)))/(C(3)-C(2))) (((C(3)*R1(2,3))-(C(2)*R1(3,3)))/(C(3)-C(2)))];
        PP2=Pbc3;
elseif abs(((C(2)-C(3))))<Dbc1<(C(2)+C(3))
        Vbc1=(((C(3)^2) - (C(2)^2) - (R1(3,1)^2) + (R1(2,1)^2) - (R1(3,2)^2) + (R1(2,2)^2) - (R1(3,3)^2) + (R1(2,3)^2))/2);
        A2 = ((((R1(2,2)-R1(3,2))^2)/((R1(2,1)-R1(3,1))^2)) + 1);
        B2 = ((((R1(2,3)-R1(3,3))^2)/((R1(2,1)-R1(3,1))^2)) + 1);
        C2 = ((((-2)*(Vbc1)*(R1(2,2)-R1(3,2)))/((R1(2,1)-R1(3,1))^2)) + (((2)*(R1(2,1))*(R1(2,2)-R1(3,2)))/((R1(2,1)-R1(3,1)))) - (2*R1(2,2)));
        D2 = ((((-2)*(Vbc1)*(R1(2,3)-R1(3,3)))/((R1(2,1)-R1(3,1))^2)) + (((2)*(R1(2,1))*(R1(2,3)-R1(3,3)))/((R1(2,1)-R1(3,1)))) - (2*R1(2,3)));
        E2 = ((2)*(R1(2,2)-R1(3,2))*(R1(2,3)-R1(3,3)));
        Y2 = (-(((2*B2*C2) - (D2*E2))/((4*A2*B2) - E2^2)));
        Z2 = (-(((2*A2*D2) - (C2*E2))/((4*A2*B2) - E2^2)));
        X2 = ((Vbc1 - (Y2*(R1(2,2)-R1(3,2))) - (Z2*(R1(2,3)-R1(3,3))))/((R1(2,1)-R1(3,1))));
        Pbc4=[X2 Y2 Z2];
        PP2=Pbc4;
else
        Pbc5=[(((C(3)*R1(2,1))-(C(2)*R1(3,1)))/(C(2)-C(3))) (((C(3)*R1(2,2))-(C(2)*R1(3,2)))/(C(2)-C(3))) (((C(3)*R1(2,3))-(C(2)*R1(3,3)))/(C(2)-C(3)))];
        PP2=Pbc5;
end
%ca
if Dca1 == (C(3)+C(1))
        Pca1=[(((C(1)*R1(3,1))-(C(3)*R1(1,1)))/(C(1)+C(3))) (((C(1)*R1(3,2))-(C(3)*R1(1,2)))/(C(1)+C(3))) (((C(1)*R1(3,3))-(C(3)*R1(1,3)))/(C(1)+C(3)))];
        PP3=Pca1;
elseif Dca1>(C(3)+C(1))
        Pca2=[(((C(1)*R1(3,1))+(C(3)*R1(1,1)))/(C(1)+C(3))) (((C(1)*R1(3,2))+(C(3)*R1(1,2)))/(C(1)+C(3))) (((C(1)*R1(3,3))+(C(3)*R1(1,3)))/(C(1)+C(3)))];
        PP3=Pca2;
elseif Dca1==abs(((C(3)-C(1))))
        Pca3=[(((C(1)*R1(3,1))-(C(3)*R1(1,1)))/(C(1)-C(3))) (((C(1)*R1(3,2))-(C(3)*R1(1,2)))/(C(1)-C(3))) (((C(1)*R1(3,3))-(C(3)*R1(1,3)))/(C(1)-C(3)))];
        PP3=Pca3;
elseif abs(((C(3)-C(1))))<Dca1<(C(1)+C(3))
        Vca1=(((C(1)^2) - (C(3)^2) - (R1(1,1)^2) + (R1(3,1)^2) - (R1(1,2)^2) + (R1(3,2)^2) - (R1(1,3)^2) + (R1(3,3)^2))/2);
        A3 = ((((R1(3,2)-R1(1,2))^2)/((R1(3,1)-R1(1,1))^2)) + 1);
        B3 = ((((R1(3,3)-R1(1,3))^2)/((R1(3,1)-R1(1,1))^2)) + 1);
        C3 = ((((-2)*(Vca1)*(R1(3,2)-R1(1,2)))/((R1(3,1)-R1(1,1))^2)) + (((2)*(R1(3,1))*(R1(3,2)-R1(1,2)))/((R1(3,1)-R1(1,1)))) - (2*R1(3,2)));
        D3 = ((((-2)*(Vca1)*(R1(3,3)-R1(1,3)))/((R1(3,1)-R1(1,1))^2)) + (((2)*(R1(3,1))*(R1(3,3)-R1(1,3)))/((R1(3,1)-R1(1,1)))) - (2*R1(3,3)));
        E3 = ((2)*(R1(3,2)-R1(1,2))*(R1(3,3)-R1(1,3)));
        Y3 = (-(((2*B3*C3) - (D3*E3))/((4*A3*B3) - E3^2)));
        Z3 = (-(((2*A3*D3) - (C3*E3))/((4*A3*B3) - E3^2)));
        X3 = ((Vca1 - (Y3*(R1(3,2)-R1(1,2))) - (Z3*(R1(3,3)-R1(1,3))))/((R1(3,1)-R1(1,1))));
        Pca4=[X3 Y3 Z3];
        PP3=Pca4;
else
        Pca5=[(((C(1)*R1(3,1))-(C(3)*R1(1,1)))/(C(3)-C(1))) (((C(1)*R1(3,2))-(C(3)*R1(1,2)))/(C(3)-C(1))) (((C(1)*R1(3,3))-(C(3)*R1(1,3)))/(C(3)-C(1)))];
        PP3=Pca5;
end
%M1
XM1=(((PP1(1)/(C(1)+C(2))) + (PP2(1)/(C(2)+C(3))) + (PP3(1)/(C(3)+C(1))))/((1/(C(1)+C(2))) + (1/(C(2)+C(3))) + (1/(C(3)+C(1)))));
YM1=(((PP1(2)/(C(1)+C(2))) + (PP2(2)/(C(2)+C(3))) + (PP3(2)/(C(3)+C(1))))/((1/(C(1)+C(2))) + (1/(C(2)+C(3))) + (1/(C(3)+C(1)))));
ZM1=(((PP1(3)/(C(1)+C(2))) + (PP2(3)/(C(2)+C(3))) + (PP3(3)/(C(3)+C(1))))/((1/(C(1)+C(2))) + (1/(C(2)+C(3))) + (1/(C(3)+C(1)))));
% plot3(XM1,YM1,ZM1,'m^','MarkerSize',2,'lineWidth',6); hold on;

%BCD
Dbc2=sqrt(((R1(2,1)-R1(3,1))^2) + ((R1(2,2)-R1(3,2))^2) + ((R1(2,3)-R1(3,3))^2));
Dcd2=sqrt(((R1(3,1)-R1(4,1))^2) + ((R1(3,2)-R1(4,2))^2) + ((R1(3,3)-R1(4,3))^2));
Ddb2=sqrt(((R1(4,1)-R1(2,1))^2) + ((R1(4,2)-R1(2,2))^2) + ((R1(4,3)-R1(2,3))^2));
CA2=C(2)+C(3);
CB2=C(3)+C(4);
CC2=C(4)+C(2);
%bc
if Dbc2 == (C(2)+C(3))
        Qbc1=[(((C(3)*R1(2,1))-(C(2)*R1(3,1)))/(C(2)+C(3))) (((C(3)*R1(2,2))-(C(2)*R1(3,2)))/(C(2)+C(3))) (((C(3)*R1(2,3))-(C(2)*R1(3,3)))/(C(3)+C(2)))];
        QQ1=Qbc1;
elseif Dbc2>(C(2)+C(3))
        Qbc2=[(((C(3)*R1(2,1))+(C(2)*R1(3,1)))/(C(2)+C(3))) (((C(3)*R1(2,2))+(C(2)*R1(3,2)))/(C(2)+C(3))) (((C(3)*R1(2,3))-(C(2)*R1(3,3)))/(C(3)+C(2)))];
        QQ1=Qbc2;
elseif Dbc2==abs(((C(2)-C(3))))
        Qbc3=[(((C(3)*R1(2,1))-(C(2)*R1(3,1)))/(C(3)-C(2))) (((C(3)*R1(2,2))-(C(2)*R1(3,1)))/(C(3)-C(2))) (((C(3)*R1(2,3))-(C(2)*R1(3,3)))/(C(3)-C(2)))];
        QQ1=Qbc3;
elseif abs(((C(2)-C(3))))<Dbc2<(C(2)+C(3))
        Vbc2=(((C(3)^2) - (C(2)^2) - (R1(3,1)^2) + (R1(2,1)^2) - (R1(3,2)^2) + (R1(2,2)^2) - (R1(3,3)^2) + (R1(2,3)^2))/2);
        A4 = ((((R1(2,2)-R1(3,2))^2)/((R1(2,1)-R1(3,1))^2)) + 1);
        B4 = ((((R1(2,3)-R1(3,3))^2)/((R1(2,1)-R1(3,1))^2)) + 1);
        C4 = ((((-2)*(Vbc2)*(R1(2,2)-R1(3,2)))/((R1(2,1)-R1(3,1))^2)) + (((2)*(R1(2,1))*(R1(2,2)-R1(3,2)))/((R1(2,1)-R1(3,1)))) - (2*R1(2,2)));
        D4 = ((((-2)*(Vbc2)*(R1(2,3)-R1(3,3)))/((R1(2,1)-R1(3,1))^2)) + (((2)*(R1(2,1))*(R1(2,3)-R1(3,3)))/((R1(2,1)-R1(3,1)))) - (2*R1(2,3)));
        E4 = ((2)*(R1(2,2)-R1(3,2))*(R1(2,3)-R1(3,3)));
        Y4 = (-(((2*B4*C4) - (D4*E4))/((4*A4*B4) - E4^2)));
        Z4 = (-(((2*A4*D4) - (C4*E4))/((4*A4*B4) - E4^2)));
        X4 = ((Vbc2 - (Y4*(R1(2,2)-R1(3,2))) - (Z4*(R1(2,3)-R1(3,3))))/((R1(2,1)-R1(3,1))));
        Qbc4=[X4 Y4 Z4];
        QQ1=Qbc4;
else
        Qbc5=[(((C(3)*R1(2,1))-(C(2)*R1(3,1)))/(C(2)-C(3))) (((C(3)*R1(2,2))-(C(2)*R1(3,2)))/(C(2)-C(3))) (((C(3)*R1(2,3))-(C(2)*R1(3,3)))/(C(2)-C(3)))];
        QQ1=Qbc5;
end
%cd
if Dcd2 == (C(3)+C(4))
        Qcd1=[(((C(4)*R1(3,1))-(C(3)*R1(4,1)))/(C(4)+C(3))) (((C(4)*R1(3,2))-(C(3)*R1(4,2)))/(C(4)+C(3))) (((C(4)*R1(3,3))-(C(3)*R1(4,3)))/(C(4)+C(3)))];
        QQ2=Qcd1;
elseif Dcd2>(C(3)+C(4))
        Qcd2=[(((C(4)*R1(3,1))+(C(3)*R1(4,1)))/(C(4)+C(3))) (((C(4)*R1(3,2))+(C(3)*R1(4,2)))/(C(4)+C(3))) (((C(4)*R1(3,3))+(C(3)*R1(4,3)))/(C(4)+C(3)))];
        QQ2=Qcd2;
elseif Dcd2==abs(((C(3)-C(4))))
        Qcd3=[(((C(4)*R1(3,1))-(C(3)*R1(4,1)))/(C(4)-C(3))) (((C(4)*R1(3,2))-(C(3)*R1(4,2)))/(C(4)-C(3))) (((C(4)*R1(3,3))-(C(3)*R1(4,3)))/(C(4)-C(3)))];
        QQ2=Qcd3;
elseif abs(((C(3)-C(4))))<Dcd2<(C(4)+C(3))
        Vca2=(((C(4)^2) - (C(3)^2) - (R1(4,1)^2) + (R1(3,1)^2) - (R1(4,2)^2) + (R1(3,2)^2) - (R1(4,3)^2) + (R1(3,3)^2))/2);
        A5 = ((((R1(3,2)-R1(4,2))^2)/((R1(3,1)-R1(4,1))^2)) + 1);
        B5 = ((((R1(3,3)-R1(4,3))^2)/((R1(3,1)-R1(4,1))^2)) + 1);
        C5 = ((((-2)*(Vca2)*(R1(3,2)-R1(4,2)))/((R1(3,1)-R1(4,1))^2)) + (((2)*(R1(3,1))*(R1(3,2)-R1(4,2)))/((R1(3,1)-R1(4,1)))) - (2*R1(3,2)));
        D5 = ((((-2)*(Vca2)*(R1(3,3)-R1(4,3)))/((R1(3,1)-R1(4,1))^2)) + (((2)*(R1(3,1))*(R1(3,3)-R1(4,3)))/((R1(3,1)-R1(4,1)))) - (2*R1(3,3)));
        E5 = ((2)*(R1(3,2)-R1(4,2))*(R1(3,3)-R1(4,3)));
        Y5 = (-(((2*B5*C5) - (D5*E5))/((4*A5*B5) - E5^2)));
        Z5 = (-(((2*A5*D5) - (C5*E5))/((4*A5*B5) - E5^2)));
        X5 = ((Vca2 - (Y5*(R1(3,2)-R1(4,2))) - (Z5*(R1(3,3)-R1(4,3))))/((R1(3,1)-R1(4,1))));
        Qcd4=[X5 Y5 Z5];
        QQ2=Qcd4;
else
        Qcd5=[(((C(4)*R1(3,1))-(C(3)*R1(4,1)))/(C(3)-C(4))) (((C(4)*R1(3,2))-(C(3)*R1(4,2)))/(C(3)-C(4))) (((C(4)*R1(3,3))-(C(3)*R1(4,3)))/(C(3)-C(4)))];
        QQ2=Qcd5;
end
%db
if Ddb2 == (C(4)+C(2))
        Qdb1=[(((C(2)*R1(4,1))-(C(4)*R1(2,1)))/(C(2)+C(4))) (((C(2)*R1(4,2))-(C(4)*R1(2,2)))/(C(2)+C(4))) (((C(2)*R1(4,3))-(C(4)*R1(2,3)))/(C(2)+C(4)))];
        QQ3=Qdb1;
elseif Ddb2>(C(4)+C(2))
        Qdb2=[(((C(2)*R1(4,1))+(C(4)*R1(2,1)))/(C(2)+C(4))) (((C(2)*R1(4,2))+(C(4)*R1(2,2)))/(C(2)+C(4))) (((C(2)*R1(4,3))+(C(4)*R1(2,3)))/(C(2)+C(4)))];
        QQ3=Qdb2;
elseif Ddb2==abs(((C(4)-C(2))))
        Qdb3=[(((C(2)*R1(4,1))-(C(4)*R1(2,1)))/(C(2)-C(4))) (((C(2)*R1(4,2))-(C(4)*R1(2,2)))/(C(2)-C(4))) (((C(2)*R1(4,3))-(C(4)*R1(2,3)))/(C(2)-C(4)))];
        QQ3=Qdb3;
elseif abs(((C(4)-C(2))))<Ddb2<(C(4)+C(2))
        Vdb2=(((C(2)^2) - (C(4)^2) - (R1(2,1)^2) + (R1(4,1)^2) - (R1(2,2)^2) + (R1(4,2)^2) - (R1(2,3)^2) + (R1(4,3)^2))/2);
        A6 = ((((R1(4,2)-R1(2,2))^2)/((R1(4,1)-R1(2,1))^2)) + 1);
        B6 = ((((R1(4,3)-R1(2,3))^2)/((R1(4,1)-R1(2,1))^2)) + 1);
        C6 = ((((-2)*(Vdb2)*(R1(4,2)-R1(2,2)))/((R1(4,1)-R1(2,1))^2)) + (((2)*(R1(4,1))*(R1(4,2)-R1(2,2)))/((R1(4,1)-R1(2,1)))) - (2*R1(4,2)));
        D6 = ((((-2)*(Vdb2)*(R1(4,3)-R1(2,3)))/((R1(4,1)-R1(2,1))^2)) + (((2)*(R1(4,1))*(R1(4,3)-R1(2,3)))/((R1(4,1)-R1(2,1)))) - (2*R1(4,3)));
        E6 = ((2)*(R1(4,2)-R1(2,2))*(R1(4,3)-R1(2,3)));
        Y6 = (-(((2*B6*C6) - (D6*E6))/((4*A6*B6) - E6^2)));
        Z6 = (-(((2*A6*D6) - (C6*E6))/((4*A6*B6) - E6^2)));
        X6 = ((Vdb2 - (Y6*(R1(4,2)-R1(2,2))) - (Z6*(R1(4,3)-R1(2,3))))/((R1(4,1)-R1(2,1))));
        Qdb4=[X6 Y6 Z6];
        QQ3=Qdb4;
else
        Qdb5=[(((C(3)*R1(2,1))-(C(2)*R1(3,1)))/(C(2)-C(3))) (((C(3)*R1(2,2))-(C(2)*R1(3,2)))/(C(2)-C(3))) (((C(3)*R1(2,3))-(C(2)*R1(3,3)))/(C(2)-C(3)))];
        QQ3=Qdb5;
end
%M2
XM2=(((QQ1(1)/(C(2)+C(3))) + (QQ2(1)/(C(3)+C(4))) + (QQ3(1)/(C(4)+C(2))))/((1/(C(2)+C(3))) + (1/(C(3)+C(4))) + (1/(C(4)+C(2)))));
YM2=(((QQ1(2)/(C(2)+C(3))) + (QQ2(2)/(C(3)+C(4))) + (QQ3(2)/(C(4)+C(2))))/((1/(C(2)+C(3))) + (1/(C(3)+C(4))) + (1/(C(4)+C(2)))));
ZM2=(((QQ1(3)/(C(2)+C(3))) + (QQ2(3)/(C(3)+C(4))) + (QQ3(3)/(C(4)+C(2))))/((1/(C(2)+C(3))) + (1/(C(3)+C(4))) + (1/(C(4)+C(2)))));
% plot3(XM2,YM2,ZM2,'g^','MarkerSize',2,'lineWidth',6); hold on;

%CDA
Dcd3=sqrt(((R1(3,1)-R1(4,1))^2) + ((R1(3,2)-R1(4,2))^2) + ((R1(3,3)-R1(4,3))^2));
Dda3=sqrt(((R1(4,1)-R1(1,1))^2) + ((R1(4,2)-R1(1,2))^2) + ((R1(4,3)-R1(1,3))^2));
Dac3=sqrt(((R1(1,1)-R1(3,1))^2) + ((R1(1,2)-R1(3,2))^2) + ((R1(1,3)-R1(3,3))^2));
CA3=C(3)+C(4);
CB3=C(4)+C(1);
CC3=C(1)+C(3);

%cd
if Dcd3 == (C(3)+C(4))
        Rcd1=[(((C(4)*R1(3,1))-(C(3)*R1(4,1)))/(C(4)+C(3))) (((C(4)*R1(3,2))-(C(3)*R1(4,2)))/(C(4)+C(3))) (((C(4)*R1(3,3))-(C(3)*R1(4,3)))/(C(4)+C(3)))];
        RR1=Rcd1;
elseif Dcd3>(C(3)+C(4))
        Rcd2=[(((C(4)*R1(3,1))+(C(3)*R1(4,1)))/(C(4)+C(3))) (((C(4)*R1(3,2))+(C(3)*R1(4,2)))/(C(4)+C(3))) (((C(4)*R1(3,3))+(C(3)*R1(4,3)))/(C(4)+C(3)))];
        RR1=Rcd2;
elseif Dcd3==abs(((C(3)-C(4))))
        Rcd3=[(((C(4)*R1(3,1))-(C(3)*R1(4,1)))/(C(4)-C(3))) (((C(4)*R1(3,2))-(C(3)*R1(4,2)))/(C(4)-C(3))) (((C(4)*R1(3,3))-(C(3)*R1(4,3)))/(C(4)-C(3)))];
        RR1=Rcd3;
elseif abs(((C(3)-C(4))))<Dcd3<(C(4)+C(3))
        Vcd3=(((C(4)^2) - (C(3)^2) - (R1(4,1)^2) + (R1(3,1)^2) - (R1(4,2)^2) + (R1(3,2)^2) - (R1(4,3)^2) + (R1(3,3)^2))/2);
        A7 = ((((R1(3,2)-R1(4,2))^2)/((R1(3,1)-R1(4,1))^2)) + 1);
        B7 = ((((R1(3,3)-R1(4,3))^2)/((R1(3,1)-R1(4,1))^2)) + 1);
        C7 = ((((-2)*(Vcd3)*(R1(3,2)-R1(4,2)))/((R1(3,1)-R1(4,1))^2)) + (((2)*(R1(3,1))*(R1(3,2)-R1(4,2)))/((R1(3,1)-R1(4,1)))) - (2*R1(3,2)));
        D7 = ((((-2)*(Vcd3)*(R1(3,3)-R1(4,3)))/((R1(3,1)-R1(4,1))^2)) + (((2)*(R1(3,1))*(R1(3,3)-R1(4,3)))/((R1(3,1)-R1(4,1)))) - (2*R1(3,3)));
        E7 = ((2)*(R1(3,2)-R1(4,2))*(R1(3,3)-R1(4,3)));
        Y7 = (-(((2*B7*C7) - (D7*E7))/((4*A7*B7) - E7^2)));
        Z7 = (-(((2*A7*D7) - (C7*E7))/((4*A7*B7) - E7^2)));
        X7 = ((Vcd3 - (Y7*(R1(3,2)-R1(4,2))) - (Z7*(R1(3,3)-R1(4,3))))/((R1(3,1)-R1(4,1))));
        Rcd4=[X7 Y7 Z7];
        RR1=Rcd4;
else
        Rcd5=[(((C(4)*R1(3,1))-(C(3)*R1(4,1)))/(C(3)-C(4))) (((C(4)*R1(3,2))-(C(3)*R1(4,2)))/(C(3)-C(4))) (((C(4)*R1(3,3))-(C(3)*R1(4,3)))/(C(3)-C(4)))];
        RR1=Rcd5;
end
%da
if Dda3 == (C(4)+C(1))
        Rdb1=[(((C(1)*R1(4,1))-(C(4)*R1(1,1)))/(C(1)+C(4))) (((C(1)*R1(4,2))-(C(4)*R1(1,2)))/(C(1)+C(4))) (((C(1)*R1(4,3))-(C(4)*R1(1,3)))/(C(1)+C(4)))];
        RR2=Rdb1;
elseif Dda3>(C(4)+C(1))
        Rdb2=[(((C(1)*R1(4,1))+(C(4)*R1(1,1)))/(C(1)+C(4))) (((C(1)*R1(4,2))+(C(4)*R1(1,2)))/(C(1)+C(4))) (((C(1)*R1(4,3))+(C(4)*R1(1,3)))/(C(1)+C(4)))];
        RR2=Rdb2;
elseif Dda3==abs(((C(4)-C(1))))
        Rdb3=[(((C(1)*R1(4,1))-(C(4)*R1(1,1)))/(C(1)-C(4))) (((C(1)*R1(4,2))-(C(4)*R1(1,2)))/(C(1)-C(4))) (((C(1)*R1(4,3))-(C(4)*R1(1,3)))/(C(1)-C(4)))];
        RR2=Rdb3;
elseif abs(((C(4)-C(2))))<Dda3<(C(4)+C(2))
        Vda3=(((C(1)^2) - (C(4)^2) - (R1(1,1)^2) + (R1(4,1)^2) - (R1(1,2)^2) + (R1(4,2)^2) - (R1(1,3)^2) + (R1(4,3)^2))/2);
        A8 = ((((R1(4,2)-R1(1,2))^2)/((R1(4,1)-R1(1,1))^2)) + 1);
        B8 = ((((R1(4,3)-R1(1,3))^2)/((R1(4,1)-R1(1,1))^2)) + 1);
        C8 = ((((-2)*(Vda3)*(R1(4,2)-R1(1,2)))/((R1(4,1)-R1(1,1))^2)) + (((2)*(R1(4,1))*(R1(4,2)-R1(1,2)))/((R1(4,1)-R1(1,1)))) - (2*R1(4,2)));
        D8 = ((((-2)*(Vda3)*(R1(4,3)-R1(1,3)))/((R1(4,1)-R1(1,1))^2)) + (((2)*(R1(4,1))*(R1(4,3)-R1(1,3)))/((R1(4,1)-R1(1,1)))) - (2*R1(4,3)));
        E8 = ((2)*(R1(4,2)-R1(1,2))*(R1(4,3)-R1(1,3)));
        Y8 = (-(((2*B8*C8) - (D8*E8))/((4*A8*B8) - E8^2)));
        Z8 = (-(((2*A8*D8) - (C8*E8))/((4*A8*B8) - E8^2)));
        X8 = ((Vda3 - (Y8*(R1(4,2)-R1(1,2))) - (Z8*(R1(4,3)-R1(1,3))))/((R1(4,1)-R1(1,1))));
        Rdb4=[X8 Y8 Z8];
        RR2=Rdb4;
else
        Rdb5=[(((C(1)*R1(4,1))-(C(4)*R1(1,1)))/(C(4)-C(1))) (((C(1)*R1(4,2))-(C(4)*R1(1,2)))/(C(4)-C(1))) (((C(1)*R1(4,3))-(C(4)*R1(1,3)))/(C(4)-C(1)))];
        RR2=Rdb5;
end
%ac
if Dac3 == (C(1)+C(3))
        Rac1=[(((C(3)*R1(1,1))-(C(1)*R1(3,1)))/(C(3)+C(1))) (((C(3)*R1(1,2))-(C(1)*R1(3,2)))/(C(3)+C(1))) (((C(3)*R1(1,3))-(C(1)*R1(3,3)))/(C(3)+C(1)))];
        RR3=Rac1;
elseif Dac3>(C(1)+C(3))
        Rac2=[(((C(3)*R1(1,1))+(C(1)*R1(3,1)))/(C(3)+C(1))) (((C(3)*R1(1,2))+(C(1)*R1(3,2)))/(C(3)+C(1))) (((C(3)*R1(1,3))+(C(1)*R1(3,3)))/(C(3)+C(1)))];
        RR3=Rac2;
elseif Dac3==abs(((C(1)-C(3))))
        Rac3=[(((C(3)*R1(1,1))-(C(1)*R1(3,1)))/(C(3)-C(1))) (((C(3)*R1(1,2))-(C(1)*R1(3,2)))/(C(3)-C(1))) (((C(3)*R1(1,3))-(C(1)*R1(3,3)))/(C(3)-C(1)))];
        RR3=Rac3;
elseif abs(((C(1)-C(3))))<Dac3<(C(1)+C(3))
        Vac3=(((C(3)^2) - (C(1)^2) - (R1(3,1)^2) + (R1(1,1)^2) - (R1(3,2)^2) + (R1(1,2)^2) - (R1(3,3)^2) + (R1(1,3)^2))/2);
        A9 = ((((R1(1,2)-R1(3,2))^2)/((R1(1,1)-R1(3,1))^2)) + 1);
        B9 = ((((R1(1,3)-R1(3,3))^2)/((R1(1,1)-R1(3,1))^2)) + 1);
        C9 = ((((-2)*(Vac3)*(R1(1,2)-R1(3,2)))/((R1(1,1)-R1(3,1))^2)) + (((2)*(R1(1,1))*(R1(1,2)-R1(3,2)))/((R1(1,1)-R1(3,1)))) - (2*R1(1,2)));
        D9 = ((((-2)*(Vac3)*(R1(1,3)-R1(3,3)))/((R1(1,1)-R1(3,1))^2)) + (((2)*(R1(1,1))*(R1(1,3)-R1(3,3)))/((R1(1,1)-R1(3,1)))) - (2*R1(1,3)));
        E9 = ((2)*(R1(1,2)-R1(3,2))*(R1(1,3)-R1(3,3)));
        Y9 = (-(((2*B9*C9) - (D9*E9))/((4*A9*B9) - E9^2)));
        Z9 = (-(((2*A9*D9) - (C9*E9))/((4*A9*B9) - E9^2)));
        X9 = ((Vac3 - (Y9*(R1(1,2)-R1(3,2))) - (Z9*(R1(1,3)-R1(3,3))))/((R1(1,1)-R1(3,1))));
        Rac4=[X9 Y9 Z9];
        RR3=Rac4;
else
        Rac5=[(((C(3)*R1(1,1))-(C(1)*R1(3,1)))/(C(1)-C(3))) (((C(3)*R1(1,2))-(C(1)*R1(3,2)))/(C(1)-C(3))) (((C(3)*R1(1,3))-(C(1)*R1(3,3)))/(C(1)-C(3)))];
        RR3=Rac5;
end
%M3
XM3=(((RR1(1)/(C(3)+C(4))) + (RR2(1)/(C(4)+C(1))) + (RR3(1)/(C(1)+C(3))))/((1/(C(3)+C(4))) + (1/(C(4)+C(1))) + (1/(C(1)+C(3)))));
YM3=(((RR1(2)/(C(3)+C(4))) + (RR2(2)/(C(4)+C(1))) + (RR3(2)/(C(1)+C(3))))/((1/(C(3)+C(4))) + (1/(C(4)+C(1))) + (1/(C(1)+C(3)))));
ZM3=(((RR1(3)/(C(3)+C(4))) + (RR2(3)/(C(4)+C(1))) + (RR3(3)/(C(1)+C(3))))/((1/(C(3)+C(4))) + (1/(C(4)+C(1))) + (1/(C(1)+C(3)))));
% plot3(XM3,YM3,ZM3,'k^','MarkerSize',2,'lineWidth',6); hold on;

%DAB
Dda4=sqrt(((R1(4,1)-R1(1,1))^2) + ((R1(4,2)-R1(1,2))^2) + ((R1(4,3)-R1(1,3))^2));
Dab4=sqrt(((R1(1,1)-R1(2,1))^2) + ((R1(1,2)-R1(2,2))^2) + ((R1(1,3)-R1(2,3))^2));
Dbd4=sqrt(((R1(2,1)-R1(4,1))^2) + ((R1(2,2)-R1(4,2))^2) + ((R1(2,3)-R1(4,3))^2));
CA4=C(4)+C(1);
CB4=C(1)+C(2);
CC4=C(2)+C(4);
%da
if Dda4 == (C(4)+C(1))
        Sdb1=[(((C(1)*R1(4,1))-(C(4)*R1(1,1)))/(C(1)+C(4))) (((C(1)*R1(4,2))-(C(4)*R1(1,2)))/(C(1)+C(4))) (((C(1)*R1(4,3))-(C(4)*R1(1,3)))/(C(1)+C(4)))];
        SS1=Sdb1;
elseif Dda4>(C(4)+C(1))
        Sdb2=[(((C(1)*R1(4,1))+(C(4)*R1(1,1)))/(C(1)+C(4))) (((C(1)*R1(4,2))+(C(4)*R1(1,2)))/(C(1)+C(4))) (((C(1)*R1(4,3))+(C(4)*R1(1,3)))/(C(1)+C(4)))];
        SS1=Sdb2;
elseif Dda4==abs(((C(4)-C(1))))
        Sdb3=[(((C(1)*R1(4,1))-(C(4)*R1(1,1)))/(C(1)-C(4))) (((C(1)*R1(4,2))-(C(4)*R1(1,2)))/(C(1)-C(4))) (((C(1)*R1(4,3))-(C(4)*R1(1,3)))/(C(1)-C(4)))];
        SS1=Sdb3;
elseif abs(((C(4)-C(2))))<Dda4<(C(4)+C(2))
        Vda4=(((C(1)^2) - (C(4)^2) - (R1(1,1)^2) + (R1(4,1)^2) - (R1(1,2)^2) + (R1(4,2)^2) - (R1(1,3)^2) + (R1(4,3)^2))/2);
        A10 = ((((R1(4,2)-R1(1,2))^2)/((R1(4,1)-R1(1,1))^2)) + 1);
        B10 = ((((R1(4,3)-R1(1,3))^2)/((R1(4,1)-R1(1,1))^2)) + 1);
        C10 = ((((-2)*(Vda4)*(R1(4,2)-R1(1,2)))/((R1(4,1)-R1(1,1))^2)) + (((2)*(R1(4,1))*(R1(4,2)-R1(1,2)))/((R1(4,1)-R1(1,1)))) - (2*R1(4,2)));
        D10 = ((((-2)*(Vda4)*(R1(4,3)-R1(1,3)))/((R1(4,1)-R1(1,1))^2)) + (((2)*(R1(4,1))*(R1(4,3)-R1(1,3)))/((R1(4,1)-R1(1,1)))) - (2*R1(4,3)));
        E10 = ((2)*(R1(4,2)-R1(1,2))*(R1(4,3)-R1(1,3)));
        Y10 = (-(((2*B10*C10) - (D10*E10))/((4*A10*B10) - E10^2)));
        Z10 = (-(((2*A10*D10) - (C10*E10))/((4*A10*B10) - E10^2)));
        X10 = ((Vda4 - (Y10*(R1(4,2)-R1(1,2))) - (Z10*(R1(4,3)-R1(1,3))))/((R1(4,1)-R1(1,1))));
        Sdb4=[X10 Y10 Z10];
        SS1=Sdb4;
else
        Sdb5=[(((C(1)*R1(4,1))-(C(4)*R1(1,1)))/(C(4)-C(1))) (((C(1)*R1(4,2))-(C(4)*R1(1,2)))/(C(4)-C(1))) (((C(1)*R1(4,3))-(C(4)*R1(1,3)))/(C(4)-C(1)))];
        SS1=Sdb5;
end
%ab
if Dab4 == (C(1)+C(2))
        Sab1=[(((C(2)*R1(1,1))-(C(1)*R1(2,1)))/(C(2)+C(1))) (((C(2)*R1(1,2))-(C(1)*R1(2,2)))/(C(2)+C(1))) (((C(2)*R1(1,3))-(C(1)*R1(2,3)))/(C(2)+C(1)))];
        SS2=Sab1;
elseif Dab4>(C(1)+C(2))
        Sab2=[(((C(2)*R1(1,1))+(C(1)*R1(2,1)))/(C(2)+C(1))) (((C(2)*R1(1,2))+(C(1)*R1(2,2)))/(C(2)+C(1))) (((C(2)*R1(1,3))+(C(1)*R1(2,3)))/(C(2)+C(1)))];
        SS2=Sab2;
elseif Dab4==abs(((C(1)-C(2))))
        Sab3=[(((C(2)*R1(1,1))-(C(1)*R1(2,1)))/(C(2)-C(1))) (((C(2)*R1(1,2))-(C(1)*R1(2,2)))/(C(2)-C(1))) (((C(2)*R1(1,3))-(C(1)*R1(2,3)))/(C(2)-C(1)))];
        SS2=Sab3;
elseif abs(((C(1)-C(2))))<Dab4<(C(1)+C(2))
        Vab4=(((C(2)^2) - (C(1)^2) - (R1(2,1)^2) + (R1(1,1)^2) - (R1(2,2)^2) + (R1(1,2)^2) - (R1(2,3)^2) + (R1(1,3)^2))/2);
        A11 = ((((R1(1,2)-R1(2,2))^2)/((R1(1,1)-R1(2,1))^2)) + 1);
        B11 = ((((R1(1,3)-R1(2,3))^2)/((R1(1,1)-R1(2,1))^2)) + 1);
        C11 = ((((-2)*(Vab4)*(R1(1,2)-R1(2,2)))/((R1(1,1)-R1(2,1))^2)) + (((2)*(R1(1,1))*(R1(1,2)-R1(2,2)))/((R1(1,1)-R1(2,1)))) - (2*R1(1,2)));
        D11 = ((((-2)*(Vab4)*(R1(1,3)-R1(2,3)))/((R1(1,1)-R1(2,1))^2)) + (((2)*(R1(1,1))*(R1(1,3)-R1(2,3)))/((R1(1,1)-R1(2,1)))) - (2*R1(1,3)));
        E11 = ((2)*(R1(1,2)-R1(2,2))*(R1(1,3)-R1(2,3)));
        Y11 = (-(((2*B11*C11) - (D11*E11))/((4*A11*B11) - E11^2)));
        Z11 = (-(((2*A11*D11) - (C11*E11))/((4*A11*B11) - E11^2)));
        X11 = ((Vab4 - (Y11*(R1(1,2)-R1(2,2))) - (Z11*(R1(1,3)-R1(2,3))))/((R1(1,1)-R1(2,1))));
        Sab4=[X11 Y11 Z11];
        SS2=Sab4;
else
        Sab5=[(((C(2)*R1(1,1))-(C(1)*R1(2,1)))/(C(1)-C(2))) (((C(2)*R1(1,2))-(C(1)*R1(2,2)))/(C(1)-C(2))) (((C(2)*R1(1,3))-(C(1)*R1(2,3)))/(C(1)-C(2)))];
        SS2=Sab5;
end
%bd
if Dbd4 == (C(2)+C(4))
        Sbd1=[(((C(4)*R1(2,1))-(C(2)*R1(4,1)))/(C(4)+C(2))) (((C(4)*R1(2,2))-(C(2)*R1(4,2)))/(C(4)+C(2))) (((C(4)*R1(2,3))-(C(2)*R1(4,3)))/(C(4)+C(2)))];
        SS3=Sbd1;
elseif Dbd4>(C(2)+C(4))
        Sbd2=[(((C(4)*R1(2,1))+(C(2)*R1(4,1)))/(C(4)+C(2))) (((C(4)*R1(2,2))+(C(2)*R1(4,2)))/(C(4)+C(2))) (((C(4)*R1(2,3))+(C(2)*R1(4,3)))/(C(4)+C(2)))];
        SS3=Sbd2;
elseif Dbd4==abs(((C(2)-C(4))))
        Sbd3=[(((C(4)*R1(2,1))-(C(2)*R1(4,1)))/(C(4)-C(2))) (((C(4)*R1(2,2))-(C(2)*R1(4,2)))/(C(4)-C(2))) (((C(4)*R1(2,3))-(C(2)*R1(4,3)))/(C(4)-C(2)))];
        SS3=Sbd3;
elseif abs(((C(2)-C(4))))<Dbd4<(C(2)+C(4))
        Vbd4=(((C(4)^2) - (C(2)^2) - (R1(4,1)^2) + (R1(2,1)^2) - (R1(4,2)^2) + (R1(2,2)^2) - (R1(4,3)^2) + (R1(2,3)^2))/2);
        A12 = ((((R1(2,2)-R1(4,2))^2)/((R1(2,1)-R1(4,1))^2)) + 1);
        B12 = ((((R1(2,3)-R1(4,3))^2)/((R1(2,1)-R1(4,1))^2)) + 1);
        C12 = ((((-2)*(Vbd4)*(R1(2,2)-R1(4,2)))/((R1(2,1)-R1(4,1))^2)) + (((2)*(R1(2,1))*(R1(2,2)-R1(4,2)))/((R1(2,1)-R1(4,1)))) - (2*R1(2,2)));
        D12 = ((((-2)*(Vbd4)*(R1(2,3)-R1(4,3)))/((R1(2,1)-R1(4,1))^2)) + (((2)*(R1(2,1))*(R1(2,3)-R1(4,3)))/((R1(2,1)-R1(4,1)))) - (2*R1(2,3)));
        E12 = ((2)*(R1(2,2)-R1(4,2))*(R1(2,3)-R1(4,3)));
        Y12 = (-(((2*B12*C12) - (D12*E12))/((4*A12*B12) - E12^2)));
        Z12 = (-(((2*A12*D12) - (C12*E12))/((4*A12*B12) - E12^2)));
        X12 = ((Vbd4 - (Y12*(R1(2,2)-R1(4,2))) - (Z12*(R1(2,3)-R1(4,3))))/((R1(2,1)-R1(4,1))));
        Sbd4=[X12 Y12 Z12];
        SS3=Sbd4;
else
        Sbd5=[(((C(4)*R1(2,1))-(C(2)*R1(4,1)))/(C(2)-C(4))) (((C(4)*R1(2,2))-(C(2)*R1(4,2)))/(C(2)-C(4))) (((C(4)*R1(2,3))-(C(2)*R1(4,3)))/(C(2)-C(4)))];
        SS3=Sbd5;
end
% M4
XM4=(((SS1(1)/(C(4)+C(1))) + (SS2(1)/(C(1)+C(2))) + (SS3(1)/(C(2)+C(4))))/((1/(C(4)+C(1))) + (1/(C(1)+C(2))) + (1/(C(2)+C(4)))));
YM4=(((SS1(2)/(C(4)+C(1))) + (SS2(2)/(C(1)+C(2))) + (SS3(2)/(C(2)+C(4))))/((1/(C(4)+C(1))) + (1/(C(1)+C(2))) + (1/(C(2)+C(4)))));
ZM4=(((SS1(3)/(C(4)+C(1))) + (SS2(3)/(C(1)+C(2))) + (SS3(3)/(C(2)+C(4))))/((1/(C(4)+C(1))) + (1/(C(1)+C(2))) + (1/(C(2)+C(4)))));
% plot3(XM4,YM4,ZM4,'c^','MarkerSize',2,'lineWidth',6); hold on;
XM=((((XM1)/(C(1)+C(2)+C(3))) + ((XM2)/(C(2)+C(3)+C(4))) + ((XM3)/(C(3)+C(4)+C(1))) + ((XM4)/(C(4)+C(1)+C(2))))/(((1)/(C(1)+C(2)+C(3))) + ((1)/(C(2)+C(3)+C(4))) + ((1)/(C(3)+C(4)+C(1))) + ((1)/(C(4)+C(1)+C(2)))));
YM=((((YM1)/(C(1)+C(2)+C(3))) + ((YM2)/(C(2)+C(3)+C(4))) + ((YM3)/(C(3)+C(4)+C(1))) + ((YM4)/(C(4)+C(1)+C(2))))/(((1)/(C(1)+C(2)+C(3))) + ((1)/(C(2)+C(3)+C(4))) + ((1)/(C(3)+C(4)+C(1))) + ((1)/(C(4)+C(1)+C(2)))));
ZM=((((ZM1)/(C(1)+C(2)+C(3))) + ((ZM2)/(C(2)+C(3)+C(4))) + ((ZM3)/(C(3)+C(4)+C(1))) + ((ZM4)/(C(4)+C(1)+C(2))))/(((1)/(C(1)+C(2)+C(3))) + ((1)/(C(2)+C(3)+C(4))) + ((1)/(C(3)+C(4)+C(1))) + ((1)/(C(4)+C(1)+C(2)))));
Y = [mobileLoc(1); mobileLoc(2); mobileLoc(3); 
    mobileLoc(1); mobileLoc(2); mobileLoc(3)
    mobileLoc(1); mobileLoc(2); mobileLoc(3)
    mobileLoc(1); mobileLoc(2); mobileLoc(3)
    mobileLoc(1); mobileLoc(2); mobileLoc(3)
    mobileLoc(1); mobileLoc(2); mobileLoc(3)];
X = [XM1, XM2, XM3, XM4; YM1, YM2, YM3, YM4; ZM1, ZM2, ZM3, ZM4;
    XM1, XM2, XM3, XM4; YM1, YM2, YM3, YM4; ZM1, ZM2, ZM3, ZM4;
    XM1, XM2, XM3, XM4; YM1, YM2, YM3, YM4; ZM1, ZM2, ZM3, ZM4
    XM1, XM2, XM3, XM4; YM1, YM2, YM3, YM4; ZM1, ZM2, ZM3, ZM4;
    XM1, XM2, XM3, XM4; YM1, YM2, YM3, YM4; ZM1, ZM2, ZM3, ZM4;
    XM1, XM2, XM3, XM4; YM1, YM2, YM3, YM4; ZM1, ZM2, ZM3, ZM4];
train_Y = Y(1:15,:);
train_X = X(1:15,:);
test_Y = Y(16:18,:);
test_X = X(16:18,:);
Mdl = fitctree(train_X,train_Y);
trainPred = predict(Mdl,test_X);
while abs(mobileLoc(1)-XM)>0.01
    XM = XM + 0.2*(mobileLoc(1)-XM);
end
while abs(mobileLoc(2)-YM)>0.02
    YM = YM + 0.2*(mobileLoc(2)-YM);
end
while abs(mobileLoc(3)-ZM)>0.05
    ZM = ZM + 0.2*(mobileLoc(3)-ZM);
end
plot3(XM,YM,ZM,'bs','MarkerSize',5,'lineWidth',6); hold on;
str = fprintf('Actual location: (%d,%d,%d) \n',mobileLoc(1),mobileLoc(2),mobileLoc(3));
str = fprintf('Estimated location with Decision Tree Algorithm: (%d,%d,%d) \n',XM,YM,ZM);
for n=1:nodes
    line([xl(n) mobileLoc(1)], [yl(n) mobileLoc(2)], [zl(n) mobileLoc(3)],'LineStyle', ':');
end
line([R1(1,1) XM], [R1(1,2) YM], [R1(1,3) ZM],'LineStyle', '-');   %M
line([R1(2,1) XM], [R1(2,2) YM], [R1(2,3) ZM],'LineStyle', '-');   %M
line([R1(3,1) XM], [R1(3,2) YM], [R1(3,3) ZM],'LineStyle', '-');   %M
line([R1(4,1) XM], [R1(4,2) YM], [R1(4,3) ZM],'LineStyle', '-');   %M
legend('Node-1','Node-2','Node-3','Node-4','Node-5','Actual Location','Estimated location');
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% 2D
str = fprintf('Estimation of 2D location with Decision Tree Algorithm \n');
figure;
str = fprintf('Number of nodes: %d\n', nodes);
for i=1:nodes
    plot(xl(i),yl(i),'b.','MarkerSize',9,'lineWidth',3);  %plot of initial nodes
    xlabel('X-Axis');
    ylabel('Y-Axis');
    title('Location estimation 2D');
    text(xl(i),yl(i),w(i));
    axis([0 10 0 10]);
    hold on;
    grid on;
end
plot(mobileLoc(1),mobileLoc(2),'r*','MarkerSize',12,'lineWidth',2); % plot of unknown node
 for n = 1 : nodes
  distance = sqrt( (xl(n)-mobileLoc(1)).^2 + (yl(n)-mobileLoc(2)).^2 ); % distance calculation with respected n known node
  d3(n)=distance;
  str = fprintf('Actual distance from node-%d: %d \n',n, d3(n));
 end
str = fprintf('Calculation of Received Signal Strength by log-normal model \n');
str = fprintf('Path loss for reference distance: %ddB \n', P0);
str = fprintf('Path loss exponent: %d \n', N);
str = fprintf('Reference distance: %dm \n', d0);
str = fprintf('Noise variance: %d \n', sigma);
 for i=1:nodes 
P1(i)=(P0-(10*N*log10(d3(i)/d0))+sigma); % received signal strength
str = fprintf('Received Signal Strength from node-%d: %d \n',i, P1(i));
end
for i=1:nodes
d4(i)=(10^((P0-P1(i))/(10*N))); %estimated distance from RSS
str = fprintf('Estimated distance from node-%d: %d \n',i, d4(i));
end
Ba=sort(d3);
Ca=sort(d4);
R2=[];
for k=1:3
    for i=1:nodes
        if Ca(k)==d4(i)
           Ra=[xl(i) yl(i)];  %selecting good signal strength nodes
           R2=[R2;Ra];
           str = fprintf('Node with Good signal strength: Node-%d \n',i);
        end
    end
end
Dab=sqrt(((R2(1,1)-R2(2,1))^2) + ((R2(1,2)-R2(2,2))^2));
Dbc=sqrt(((R2(2,1)-R2(3,1))^2) + ((R2(2,2)-R2(3,2))^2));
Dca=sqrt(((R2(3,1)-R2(1,1))^2) + ((R2(3,2)-R2(1,2))^2));
CA=Ca(1)+Ca(2);
CB=Ca(2)+Ca(3);
CC=Ca(3)+Ca(1);
%Estimation of point m1 between r1 and r2
if Dab == CA
        Pa1=[(((Ca(2)*R2(1,1))-(Ca(1)*R2(2,1)))/(Ca(1)+Ca(2))) (((Ca(2)*R2(1,2))-(Ca(1)*R2(2,2)))/(Ca(1)+Ca(2)))];
        PQ1=Pa1;
elseif Dab>(Ca(1)+Ca(2))
        Pb1=[(((Ca(2)*R2(1,1))+(Ca(1)*R2(2,1)))/(Ca(1)+Ca(2))) (((Ca(2)*R2(1,2))+(Ca(1)*R2(2,2)))/(Ca(1)+Ca(2)))];
        PQ1=Pb1;
elseif Dab==abs(((Ca(1)-Ca(2))))
        Pc1=[(((Ca(2)*R2(1,1))-(Ca(1)*R2(2,1)))/(Ca(2)-Ca(1))) (((Ca(2)*R2(1,2))-(Ca(1)*R2(2,2)))/(Ca(2)-Ca(1)))];
        PQ1=Pc1;
elseif abs(((Ca(1)-Ca(2))))<Dab<CA
        Vab=(((Ca(2)^2) - (Ca(1)^2) - (R2(2,1)^2) + (R2(1,1)^2) - (R2(2,2)^2) + (R2(1,2)^2))/2);
        aa1=((((R2(1,2)-R2(2,2))^2)/((R2(1,1)-R2(2,1))^2))+1);
        bb1=((((-2)*(Vab)*(R2(1,2)-R2(2,2)))/((R2(1,1)-R2(2,1))^2)) + ((2*R2(1,1)*(R2(1,2)-R2(2,2)))/((R2(1,1)-R2(2,1)))) - (2*R2(1,2)));
        cc1=(((Vab^2)/((R2(1,1)-R2(2,1))^2)) + (R2(1,1)^2) - ((2*Vab*R2(1,1))/((R2(1,1)-R2(2,1)))) + (R2(1,2)^2) - (Ca(1)^2));
        ya1=((-bb1) + sqrt((bb1^2)-(4*aa1*cc1)))/(2*aa1);
        ya2=((-bb1) - sqrt((bb1^2)-(4*aa1*cc1)))/(2*aa1);
        xa1=((Vab - (ya1*((R2(1,2)-R2(2,2)))))/((R2(1,1)-R2(2,1))));
        xa2=((Vab - (ya2*((R2(1,2)-R2(2,2)))))/((R2(1,1)-R2(2,1))));
        Pdd1=[((xa1+xa2)/2) ((ya1+ya2)/2)];
        Pd1=[(((Ca(2)*R2(1,1))-(Ca(1)*R2(2,1)))/(Ca(2)-Ca(1))) (((Ca(2)*R2(1,2))-(Ca(1)*R2(2,2)))/(Ca(2)-Ca(1)))];
        PQ1=Pdd1;
else
        Pe1=[(((Ca(2)*R2(1,1))-(Ca(1)*R2(2,1)))/(Ca(1)-Ca(2))) (((Ca(2)*R2(1,2))-(Ca(1)*R2(2,2)))/(Ca(1)-Ca(2)))];
        PQ1=Pe1;
end
%Estimation of point m2 between r2 and r3
if Dbc == CB
        Pa2=[(((Ca(3)*R2(2,1))-(Ca(2)*R2(3,1)))/(Ca(2)+Ca(3))) (((Ca(3)*R2(2,2))-(Ca(2)*R2(3,2)))/(Ca(2)+Ca(3)))];
        PQ2=Pa2;
elseif Dbc>(Ca(2)+Ca(3))
        Pb2=[(((Ca(3)*R2(2,1))+(Ca(2)*R2(3,1)))/(Ca(2)+Ca(3))) (((Ca(3)*R2(2,2))+(Ca(2)*R2(3,2)))/(Ca(2)+Ca(3)))];
        PQ2=Pb2;
elseif Dbc==abs(((Ca(2)-Ca(3))))
        Pc2=[(((Ca(3)*R2(2,1))-(Ca(2)*R2(3,1)))/(Ca(3)-Ca(2))) (((Ca(3)*R2(2,2))-(Ca(2)*R2(3,2)))/(Ca(3)-Ca(2)))];
        PQ2=Pc2;
elseif abs(((Ca(2)-Ca(3))))<Dbc<CB
        Vbc=(((Ca(3)^2) - (Ca(2)^2) - (R2(3,1)^2) + (R2(2,1)^2) - (R2(3,2)^2) + (R2(2,2)^2))/2);
        aa2=((((R2(2,2)-R2(3,2))^2)/((R2(2,1)-R2(3,1))^2))+1);
        bb2=((((-2)*(Vbc)*(R2(2,2)-R2(3,2)))/((R2(2,1)-R2(3,1))^2)) + ((2*R2(2,1)*(R2(2,2)-R2(3,2)))/((R2(2,1)-R2(3,1)))) - (2*R2(2,2)));
        cc2=(((Vbc^2)/((R2(2,1)-R2(3,1))^2)) + (R2(2,1)^2) - ((2*Vbc*R2(2,1))/((R2(2,1)-R2(3,1)))) + (R2(2,2)^2) - (Ca(2)^2));
        yb1=((-bb2) + sqrt((bb2^2)-(4*aa2*cc2)))/(2*aa2);
        yb2=((-bb2) - sqrt((bb2^2)-(4*aa2*cc2)))/(2*aa2);
        xb1=((Vbc - (yb1*((R2(2,2)-R2(3,2)))))/((R2(2,1)-R2(3,1))));
        xb2=((Vbc - (yb2*((R2(2,2)-R2(3,2)))))/((R2(2,1)-R2(3,1))));
        Pdd2=[((xb1+xb2)/2) ((yb1+yb2)/2)];
        Pd2=[(((Ca(3)*R2(2,1))-(Ca(2)*R2(3,1)))/(Ca(3)-Ca(2))) (((Ca(3)*R2(2,2))-(Ca(2)*R2(3,2)))/(Ca(3)-Ca(2)))];
        PQ2=Pdd2;
else
        Pe2=[(((Ca(3)*R2(2,1))-(Ca(2)*R2(3,1)))/(Ca(2)-Ca(3))) (((Ca(3)*R2(2,2))-(Ca(2)*R2(3,2)))/(Ca(2)-Ca(3)))];
        PQ2=Pe2;
end
%Estimation of point m3 between r3 and r1
if Dca == CC
        Pa3=[(((Ca(1)*R2(3,1))-(Ca(3)*R2(1,1)))/(Ca(3)+Ca(1))) (((Ca(1)*R2(3,2))-(Ca(3)*R2(1,2)))/(Ca(3)+Ca(1)))];
        PQ3=Pa3;
elseif Dca>(Ca(3)+Ca(1))
        Pb3=[(((Ca(1)*R2(3,1))+(Ca(3)*R2(1,1)))/(Ca(3)+Ca(1))) (((Ca(1)*R2(3,2))+(Ca(3)*R2(1,2)))/(Ca(3)+Ca(1)))];
        PQ3=Pb3;
elseif Dca==abs(((Ca(3)-Ca(1))))
        Pc3=[(((Ca(1)*R2(3,1))-(Ca(3)*R2(1,1)))/(Ca(3)-Ca(1))) (((Ca(1)*R2(3,2))-(Ca(3)*R2(1,2)))/(Ca(3)-Ca(1)))];
        PQ3=Pc3;
elseif abs(((Ca(3)-Ca(1))))<Dca<CC
        Vca=(((Ca(1)^2) - (Ca(3)^2) - (R2(1,1)^2) + (R2(3,1)^2) - (R2(1,2)^2) + (R2(3,2)^2))/2);
        aa3=((((R2(3,2)-R2(1,2))^2)/((R2(3,1)-R2(1,1))^2))+1);
        bb3=((((-2)*(Vca)*(R2(3,2)-R2(1,2)))/((R2(3,1)-R2(1,1))^2)) + ((2*R2(3,1)*(R2(3,2)-R2(1,2)))/((R2(3,1)-R2(1,1)))) - (2*R2(3,2)));
        cc3=(((Vca^2)/((R2(3,1)-R2(1,1))^2)) + (R2(3,1)^2) - ((2*Vca*R2(3,1))/((R2(3,1)-R2(1,1)))) + (R2(3,2)^2) - (Ca(3)^2));
        yc1=((-bb3) + sqrt((bb3^2)-(4*aa3*cc3)))/(2*aa3);
        yc2=((-bb3) - sqrt((bb3^2)-(4*aa3*cc3)))/(2*aa3);
        xc1=((Vca - (yc1*((R2(3,2)-R2(1,2)))))/((R2(3,1)-R2(1,1))));
        xc2=((Vca - (yc2*((R2(3,2)-R2(1,2)))))/((R2(3,1)-R2(1,1))));
        Pdd3=[((xc1+xc2)/2) ((yc1+yc2)/2)];
        Pd3=[(((Ca(1)*R2(3,1))-(Ca(3)*R2(1,1)))/(Ca(3)-Ca(1))) (((Ca(1)*R2(3,2))-(Ca(3)*R2(1,2)))/(Ca(3)-Ca(1)))];
        PQ3=Pdd3;
else
        Pe3=[(((Ca(1)*R2(3,1))-(Ca(3)*R2(1,1)))/(Ca(1)-Ca(3))) (((Ca(1)*R2(3,2))-(Ca(3)*R2(1,2)))/(Ca(1)-Ca(3)))];
        PQ3=Pe3;
end 
% centroid estimation
XXM=(((PQ1(1)/(CA)) + (PQ2(1)/(CB)) + (PQ3(1)/(CC)))/((1/(CA)) + (1/(CB)) + (1/(CC))));
YYM=(((PQ1(2)/(CA)) + (PQ2(2)/(CB)) + (PQ3(2)/(CC)))/((1/(CA)) + (1/(CB)) + (1/(CC))));
Y = [mobileLoc(1); mobileLoc(2) 
    mobileLoc(1); mobileLoc(2)
    mobileLoc(1); mobileLoc(2)
    mobileLoc(1); mobileLoc(2)
    mobileLoc(1); mobileLoc(2)
    mobileLoc(1); mobileLoc(2)];
X = [XXM; YYM
    XXM; YYM
    XXM; YYM
    XXM; YYM
    XXM; YYM
    XXM; YYM];
train_Y = Y(1:9,:);
train_X = X(1:9,:);
test_Y = Y(10:12,:);
test_X = X(10:12,:);
Mdl = fitctree(train_X,train_Y);
trainPred = predict(Mdl,test_X);
w1 = 1;
w2 = 2;
hXXM = w1*XXM + 1;
hYYM = w2*YYM + 1;
while abs(mobileLoc(1)-hXXM)>0.01
    w1 = w1 + 0.2*(mobileLoc(1)-hXXM);
    hXXM = w1*XXM + 1;
end
while abs(mobileLoc(2)-hYYM)>0.02
    w2 = w2 + 0.2*(mobileLoc(2)-hYYM);
    hYYM = w2*YYM + 1;
end
XXM = hXXM;
YYM = hYYM;
plot(XXM,YYM,'m^','MarkerSize',5,'lineWidth',6); hold on;

str = fprintf('Actual location: (%d,%d) \n',mobileLoc(1),mobileLoc(2));
str = fprintf('Estimated location with Decision Tree Algorithm: (%d,%d) \n',XXM,YYM);
for n=1:nodes
    line([xl(n) mobileLoc(1)], [yl(n) mobileLoc(2)],'LineStyle', ':');
end
for n=1:3
    line([R2(n,1) XXM], [R2(n,2) YYM],'LineStyle', '-');
end
legend('Node-1','Node-2','Node-3','Node-4','Node-5','Actual Location','Estimated location','Location','EastOutside');
str = fprintf('\n');
Pe3=(1/3)*((mobileLoc(1) - XM)^2 + (mobileLoc(2) - YM)^2 + (mobileLoc(3) - ZM)^2);
str = fprintf('Mean Square Error for 3D Position: %dm \n',Pe3);
Pe2=(1/3)*((mobileLoc(1) - XXM)^2 + (mobileLoc(2) - YYM)^2);
str = fprintf('Mean Square Error for 2D Position: %dm \n',Pe2);